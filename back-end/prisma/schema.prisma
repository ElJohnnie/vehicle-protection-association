generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                   @id @default(uuid())
  fullname       String
  email          String                   @unique
  documentNumber String                   @unique
  password       String
  role           Role
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  managerUnits   ManagerHasBusinessUnit[]
  units          UserHasBusinessUnit[]
}

enum Role {
  LOW
  MEDIUM
  HIGH
}

model Client {
  id                String            @id @default(uuid())
  documentNumber    String            @unique
  fullname          String
  email             String            @unique
  telephone         String
  mobilephone       String
  indication        String?
  galaxPayId        Int?              @unique
  isActive          Boolean           @default(true)
  status            String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  licenseDocumentId String?           @unique
  businessUnitId    String
  address           Address?
  licenseDocument   LicenseDocument?  @relation(fields: [licenseDocumentId], references: [id], onUpdate: Cascade)
  identityDocument  IdentityDocument?
  unit              BusinessUnit      @relation(fields: [businessUnitId], references: [id], onUpdate: Cascade)
  vehicles          Vehicle[]
}

model Address {
  id           String        @id @default(uuid())
  zipCode      String
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  clientId     String?       @unique
  unitId       String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  client       Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Event        Event?
  BusinessUnit BusinessUnit? @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model IdentityDocument {
  id              String   @id @default(uuid())
  identityNumber  String   @unique
  expeditionOrgan String
  expeditionDate  DateTime
  birthDate       DateTime
  UF              String
  clientId        String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LicenseDocument {
  id              String          @id @default(uuid())
  licenseNumber   String          @unique
  licenseCategory LicenseCategory
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  client          Client?
  secondDriver    SecondDriver?
}

enum LicenseCategory {
  A
  B
  C
  D
  E
  AB
  AC
  AD
  AE
  ACC
}

model BusinessUnit {
  id             String                   @id @default(uuid())
  corporateName  String                   @unique
  documentNumber String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  address        Address?
  users          UserHasBusinessUnit[]
  managers       ManagerHasBusinessUnit[]
  clients        Client[]
}

model UserHasBusinessUnit {
  id             String       @id @default(uuid())
  userId         String
  businessUnitId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ManagerHasBusinessUnit {
  id             String       @id @default(uuid())
  userId         String
  businessUnitId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model VehicleConditions {
  id                String   @id @default(uuid())
  dentedTank        Boolean  @default(false)
  brokenExhaust     Boolean  @default(false)
  goodCondition     Boolean  @default(false)
  damagedTaillights Boolean  @default(false)
  damagedHeadlights Boolean  @default(false)
  vehicleId         String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SecondDriver {
  id                String           @id @default(uuid())
  documentNumber    String           @unique
  fullname          String
  birthDate         DateTime
  observations      String           @db.Text
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  licenseDocumentId String?          @unique
  licenseDocument   LicenseDocument? @relation(fields: [licenseDocumentId], references: [id], onUpdate: Cascade)
  vehicle           Vehicle[]
}

model Vehicle {
  id                  String             @id @default(uuid())
  type                TypeVehicle
  brand               String
  model               String
  yearManufacture     Int
  yearModel           String
  color               String?
  chassi              String             @unique
  renavam             String             @unique
  fuel                FuelVehicle
  value               Float
  odometer            Int?
  licensePlate        String             @unique
  tracker             Boolean            @default(false)
  trailer             Boolean            @default(false)
  alieneted           Boolean            @default(false)
  bank                String?
  financedAmount      Float?
  engineCapacity      Int?
  observations        String?            @db.Text
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  secondDriverId      String?
  clientId            String
  vehicleOwner        String?
  documentNumberOwner String?
  vehicleConditions   VehicleConditions?
  secondDriver        SecondDriver?      @relation(fields: [secondDriverId], references: [id], onUpdate: Cascade)
  client              Client             @relation(fields: [clientId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  events              Event[]
  contract            Contract?
}

enum TypeVehicle {
  CAR
  MOTORCYCLE
  TRUCK
  OTHER
}

enum FuelVehicle {
  ALCOOL
  GASOLINE
  DIESEL
  FLEX
  ELECTRIC
  OTHER
}

model Plan {
  id             String          @id @default(uuid())
  name           String          @unique
  periodicity    PlanPeriodicity
  quantity       Int             @default(0)
  additionalInfo String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  planPrices     PlanPrice[]
  Contract       Contract[]
}

model PlanPrice {
  id        String        @id @default(uuid())
  payment   PaymentMethod
  value     Int
  planId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  plan      Plan          @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum PlanPeriodicity {
  WEEKLY
  BIWEEKLY
  MONTHLY
  BIMONTHLY
  QUARTERLY
  BIANNUAL
  YEARLY
}

enum PaymentMethod {
  creditcard
  boleto
}

model Event {
  id                 String   @id @default(uuid())
  description        String
  type               String
  occurrenceDateTime DateTime
  policeReport       Boolean  @default(false)
  addressId          String   @unique
  vehicleId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  address            Address  @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  vehicle            Vehicle  @relation(fields: [vehicleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Contract {
  id        String  @id @default(uuid())
  planId    String?
  vehicleId String  @unique
  plan      Plan?   @relation(fields: [planId], references: [id], onUpdate: Cascade)
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
